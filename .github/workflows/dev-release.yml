name: Release Dev Latest

on:
  push:
    tags: ['dev.*']

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            build_name: win-x64
            args: '--win --x64 --publish=never'
          - os: windows-latest
            build_name: win-ia32
            args: '--win --ia32 --publish=never'

          - os: macos-13
            build_name: mac-x64
            args: '--mac --x64 --publish=never'
          - os: macos-14
            build_name: mac-arm64
            args: '--mac --arm64 --publish=never'

          - os: ubuntu-latest
            build_name: linux-x64
            args: '--linux --x64 --publish=never'

    environment: dev

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        id: py
        with:
          python-version: '3.11'

      - name: Setup Node
        uses: actions/setup-node@v4
        with: { node-version: 20, cache: yarn }

      - name: Enable corepack
        run: corepack enable

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Make .env file
        run: |
          echo "NEXT_PUBLIC_API_URL=${{ secrets.API_URL }}" > .env
          echo "NEXT_PUBLIC_WS_URL=${{ secrets.WS_URL }}" >> .env
          echo "NEXT_PUBLIC_CROWDIN_DISTRIBUTION_HASH=${{ secrets.CROWDIN_DISTRIBUTION_HASH }}" >> .env

      - name: Bump prerelease semver (0.2.0-dev.YYYYMMDD)
        run: |
          node -e "
          const fs = require('fs');
          const pkg = JSON.parse(fs.readFileSync('package.json'));
          const base = pkg.version || '0.1.0';
          pkg.version = `${base}-${{ github.ref_name }}`;
          fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2));
          console.log('Set package.json version =', pkg.version);
          "

      - name: Build electron
        uses: samuelmeuli/action-electron-builder@v1
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.API_URL }}
          NEXT_PUBLIC_WS_URL: ${{ secrets.WS_URL }}
          NEXT_PUBLIC_CROWDIN_DISTRIBUTION_HASH: ${{ secrets.CROWDIN_DISTRIBUTION_HASH }}
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          release: false
          build_script_name: build:action
          args: ${{ matrix.args }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.build_name }}
          path: |
            dist/*.dmg
            dist/*.zip
            dist/*.blockmap
            dist/*Setup.exe
            dist/*Setup.exe.blockmap
            dist/*.AppImage
            dist/*.deb
            dist/*.rpm
            dist/*dev*.yml

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with: { path: dist }

      - name: Publish rolling prerelease (dev-latest)
        uses: ncipollo/release-action@v1
        with:
          tag: dev-latest
          name: 'Dev Latest'
          commit: ${{ github.sha }}
          prerelease: true
          allowUpdates: true
          replacesArtifacts: true
          removeArtifacts: true
          omitBodyDuringUpdate: true
          artifacts: 'dist/**'
